package com.chatproject.controller;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hungl
 */
public class ServerManager extends javax.swing.JFrame {

    /**
     * Creates new form ServerManager
     */
    public static final String WINDOW_LAF = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
    private int PORT;
    private static Set<User> users = new HashSet<>();
    private static Map<String, PrintWriter> userWriters = new HashMap<>();
    private Map<String, ClientInfo> connectedClients;
    private DefaultTableModel model;
    
    public ServerManager() {
        initComponents();
        model = (DefaultTableModel) viewClient.getModel();
        connectedClients = new HashMap<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        ipv4field = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        startsever = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        consolearea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewClient = new javax.swing.JTable();
        portfield = new javax.swing.JTextField();
        setportBtn = new javax.swing.JButton();
        stopserverBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server Manager");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Lấy địa chỉ IPv4");

        jButton1.setText("Get");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ipv4field.setEditable(false);
        ipv4field.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        ipv4field.setText("192.168.");

        jButton2.setText("Copy");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        startsever.setText("Start");
        startsever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startseverActionPerformed(evt);
            }
        });

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        consolearea.setColumns(20);
        consolearea.setFont(new java.awt.Font("Courier New", 0, 10)); // NOI18N
        consolearea.setLineWrap(true);
        consolearea.setRows(5);
        consolearea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(consolearea);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        viewClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Username", "Type", "Status", "Command"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(viewClient);

        portfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        portfield.setText("12345");

        setportBtn.setText("SET");
        setportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setportBtnActionPerformed(evt);
            }
        });

        stopserverBtn.setText("Stop");
        stopserverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopserverBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ipv4field, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(portfield, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startsever, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopserverBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(ipv4field, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addComponent(setportBtn))
                    .addComponent(portfield)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startsever, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stopserverBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ipv4();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String text = ipv4field.getText();
            if (!text.isEmpty()) {
                StringSelection selection = new StringSelection(text);
                Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
                clipboard.setContents(selection, null);
                consolearea.append("Đã sao chép vào clipboard!\n");
            } else {
                consolearea.append("Vui lòng nhập nội dung cần sao chép!\n");
            }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void setportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setportBtnActionPerformed
        // TODO add your handling code here:
        String textp = portfield.getText();
        if (!textp.isEmpty() && textp.chars().allMatch(Character::isDigit)) {
        PORT = Integer.parseInt(textp);
        consolearea.append("Port đã được cập nhật thành "+PORT+"\n");
        }
    }//GEN-LAST:event_setportBtnActionPerformed

    private void startseverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startseverActionPerformed
        // TODO add your handling code here:
        String textp = portfield.getText();
        if (!textp.isEmpty() && textp.chars().allMatch(Character::isDigit)) {
        PORT = Integer.parseInt(textp);
        consolearea.append("Đang khởi chạy...\n");
        }
        Thread serverThread = new Thread(() -> {
        try (
            ServerSocket serverSocket = new ServerSocket(PORT, 50, InetAddress.getByName(ipv4()))
        ) {
            consolearea.append("Server is running on port " + PORT + "\n");
            consolearea.append("Địa chỉ IPv4 : "+ipv4()+"\n");
            while (true) {
                new ClientHandler(serverSocket.accept()).start();           
                consolearea.append("New client connected...\n");
            }
        } catch (IOException ex) {
                ex.printStackTrace();
        }
    });
    serverThread.start();
    }//GEN-LAST:event_startseverActionPerformed

    
    private void stopserverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopserverBtnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
       
    }//GEN-LAST:event_stopserverBtnActionPerformed

    
    private String ipv4() {
        String result = null;
        try {

            Process process = Runtime.getRuntime().exec("ipconfig");
            InputStream inputStream = process.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.contains("IPv4 Address")) {
                    String ipv4Pattern = "(\\d{1,3}\\.){3}\\d{1,3}";
                    Pattern pattern = Pattern.compile(ipv4Pattern);
                    Matcher matcher = pattern.matcher(line);
                    if (matcher.find()) {
                        result = matcher.group(); 
                        ipv4field.setText(result);
                        break; 
                    }
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return result;
    } 
    
    /*
    private static class ClientHandler extends Thread {
        private Socket socket;
        private PrintWriter writer;
        private String username;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                writer = new PrintWriter(socket.getOutputStream(), true);

                writer.println("Enter your username:");
                username = reader.readLine();

                synchronized (clientWriters) {
                    clientWriters.put(username, writer);
                    broadcastUserList();
                }

                broadcast(username + " has joined the chat");

                String message;
                while ((message = reader.readLine()) != null) {
                    broadcast(username + ": " + message);
                }
            } catch (IOException e) {
                System.out.println(username + " has left the chat");
            } finally {
                if (username != null) {
                    clientWriters.remove(username);
                    broadcastUserList();
                    broadcast(username + " has left the chat");
                }
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        private void broadcast(String message) {
            synchronized (clientWriters) {
                for (PrintWriter writer : clientWriters.values()) {
                    writer.println(message);
                }
            }
        }

        private void broadcastUserList() {
            StringBuilder userList = new StringBuilder("USERLIST:");
            synchronized (clientWriters) {
                for (String user : clientWriters.keySet()) {
                    userList.append(user).append(",");
                }
            }
            broadcast(userList.toString());
        }
    }
    */
    
    private static class ClientHandler extends Thread {
        private Socket socket;
        private BufferedReader reader;
        private PrintWriter writer;
        private User currentUser;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try {
                reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                writer = new PrintWriter(socket.getOutputStream(), true);
                
                while (true) {
                    String loginMessage = reader.readLine();
                    if (loginMessage != null) {
                        if (loginMessage.equals("guest")) {
                             currentUser = new User("Guest@" + generateRandomNumber(), User.AccountType.GUEST_LOGIN);
                                writer.println("login_success:" + currentUser.getUsername());
                                addClient(currentUser.getUsername(), "GUEST_LOGIN"); // Thêm client mới vào danh sách
                                break;
                        } else if (loginMessage.startsWith("login:")) {
                            String[] parts = loginMessage.split(":");
                        String username = parts[1];
                        String password = parts[2];
                        if (checkLogin(username, password)) {
                            currentUser = new User(username, User.AccountType.ACCOUNT_LOGIN);
                            writer.println("login_success:" + currentUser.getUsername());
                            addClient(currentUser.getUsername(), "ACCOUNT_LOGIN"); // Thêm client mới vào danh sách
                            break;
                            } else {
                                writer.println("login_fail");
                            }
                        }
                    }
                }

                users.add(currentUser);
                userWriters.put(currentUser.getUsername(), writer);
                broadcastUserList();
                
                String message;
                while ((message = reader.readLine()) != null) {
                    if (message.equalsIgnoreCase("exit")) {
                        break;
                    }
                    if (currentUser.getAccountType() == User.AccountType.ACCOUNT_LOGIN) {
                        if (message.startsWith("@")) { // Direct message
                            String[] parts = message.split(" ", 2);
                            String recipient = parts[0].substring(1);
                            String content = parts[1];
                            
                            broadcastPrivateMessage(currentUser.getUsername(), recipient, message);
                            sendMessageToUser(recipient, currentUser.getUsername(), content);
                        } else if (message.equalsIgnoreCase("general chat")) { // General chat
                            broadcastMessage(currentUser.getUsername(), message);
                            //
                            sendMessageToAll(currentUser.getUsername(), message);
                        } else { broadcastMessage(currentUser.getUsername(), message);
                            //
                            sendMessageToAll(currentUser.getUsername(), message);} 
                    } else { // GUEST_LOGIN
                         // General chat
                            broadcastMessage(currentUser.getUsername(), message);
                            //
                            sendMessageToAll(currentUser.getUsername(), message);
                            
                    }
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                if (currentUser != null) {
                    users.remove(currentUser);
                    userWriters.remove(currentUser.getUsername());
                    broadcastUserList();
                    removeClient(currentUser.getUsername());
                    //
                    
                }
                try {
                    socket.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }

        private boolean checkLogin(String username, String password) {
                try {
            String url = "jdbc:mysql://localhost:3306/clientchatdb";
            String dbUsername = "root";
            String dbPassword = "";
            Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword);
            String query = "SELECT * FROM users WHERE username = ? AND password = ?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, username);
            statement.setString(2, password);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                System.out.println("Account Found");
                return true; 
            }
            connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error. Account doesn't exist");
            return false;
        }
            return false;
        }

        private void broadcastUserList() {
            StringBuilder userList = new StringBuilder();
            for (User user : users) {
                userList.append(user.getUsername()).append(",");
            }
            for (PrintWriter writer : userWriters.values()) {
                writer.println(userList);
            }
        }

        private void broadcastMessage(String sender, String message) {
            for (PrintWriter writer : userWriters.values()) {
                writer.println("@" + sender + ":" + message);
            }
        }
        
        private void broadcastPrivateMessage(String sender, String recipient, String message) {
            PrintWriter senderWriter = userWriters.get(sender);
            PrintWriter recipientWriter = userWriters.get(recipient);
            if (senderWriter != null && recipientWriter != null) {
                senderWriter.println("@" + recipient + ":" + message);
                recipientWriter.println("@" + sender + ":" + message);
            }
        }

        private void sendMessageToUser(String recipient, String sender, String message) {
            PrintWriter writer = userWriters.get(recipient);
            if (writer != null) {
                writer.println("@" + sender + ":" + message);
            }
        }
        
        public void sendMessageToAll (String sender , String message) {
            PrintWriter writer = userWriters.get(message);
            if (writer != null) {
                writer.println(sender + ":\n" + message);
            }
        }

        private String generateRandomNumber() {
            Random rand = new Random();
            String Guest = "Guest@";
            int randomNumber = rand.nextInt(90000) + 10000;
            return String.valueOf(Guest+randomNumber);
        }
        
        private void addClient(String username, String type) {    
            DefaultTableModel model = (DefaultTableModel) viewClient.getModel();
            model.addRow(new Object[]{username, type, "Đang kết nối", ""});
    }
    
    private void removeClient(String username) {
        SwingUtilities.invokeLater(() -> {
            DefaultTableModel model = (DefaultTableModel) viewClient.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 0).equals(username)) {
                    model.removeRow(i);
                    break;
                }
            }
        });
    }
    }
    
    public void updateClientInfo(String username, String type, String status) {
        ClientInfo clientInfo = connectedClients.get(username);
        if (clientInfo != null) {
            clientInfo.setType(type);
            clientInfo.setStatus(status);
            // Cập nhật thông tin trên bảng
            updateTable();
        } else {
            System.out.println("Client '" + username + "' không tồn tại.");
        }
    }
    
     private void updateTable() {
        // Xóa tất cả các dòng trong bảng
        model.setRowCount(0);
        // Thêm lại các dòng mới từ danh sách kết nối
        for (ClientInfo clientInfo : connectedClients.values()) {
            model.addRow(new Object[]{clientInfo.getUsername(), clientInfo.getType(), clientInfo.getStatus(), ""});
        }
    }
    
    public void updateClientOnTable(String username, String type, String status) {
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).equals(username)) {
                model.setValueAt(type, i, 1);
                model.setValueAt(status, i, 2);
                break;
            }
        }
    }
    // Phương thức để xóa client khỏi danh sách kết nối
    

    // Phương thức để lấy thông tin của tất cả các client
    public Map<String, ClientInfo> getAllClients() {
        return connectedClients;
    }

    // Lớp ClientInfo đại diện cho thông tin của một client
    private static class ClientInfo {
        private String username;
        private String type;
        private String status;

        public ClientInfo(String username, String type, String status) {
            this.username = username;
            this.type = type;
            this.status = status;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public String getStatus() {
            return status;
        }

        public void setStatus(String status) {
            this.status = status;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws UnsupportedLookAndFeelException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
        UIManager.setLookAndFeel(WINDOW_LAF);
}       catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea consolearea;
    private javax.swing.JTextField ipv4field;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField portfield;
    private javax.swing.JButton setportBtn;
    private javax.swing.JButton startsever;
    private javax.swing.JButton stopserverBtn;
    public static javax.swing.JTable viewClient;
    // End of variables declaration//GEN-END:variables
}
